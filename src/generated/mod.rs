// DO NOT EDIT
// This file was @generated by Stone

#![allow(
    clippy::too_many_arguments,
    clippy::large_enum_variant,
    clippy::doc_markdown,
)]

#[cfg(feature = "dbx_account")]
pub mod account;

#[cfg(feature = "dbx_async")]
pub mod dbx_async;

#[cfg(feature = "dbx_auth")]
pub mod auth;

#[cfg(feature = "dbx_check")]
pub mod check;

#[cfg(feature = "dbx_common")]
pub mod common;

#[cfg(feature = "dbx_contacts")]
pub mod contacts;

#[cfg(feature = "dbx_file_properties")]
pub mod file_properties;

#[cfg(feature = "dbx_file_requests")]
pub mod file_requests;

#[cfg(feature = "dbx_files")]
pub mod files;

#[cfg(feature = "dbx_paper")]
pub mod paper;

#[cfg(feature = "dbx_secondary_emails")]
pub mod secondary_emails;

#[cfg(feature = "dbx_seen_state")]
pub mod seen_state;

#[cfg(feature = "dbx_sharing")]
pub mod sharing;

#[cfg(feature = "dbx_team")]
pub mod team;

#[cfg(feature = "dbx_team_common")]
pub mod team_common;

#[cfg(feature = "dbx_team_log")]
pub mod team_log;

#[cfg(feature = "dbx_team_policies")]
pub mod team_policies;

#[cfg(feature = "dbx_users")]
pub mod users;

#[cfg(feature = "dbx_users_common")]
pub mod users_common;

pub(crate) fn eat_json_fields<'de, V>(map: &mut V) -> Result<(), V::Error> where V: ::serde::de::MapAccess<'de> {
    while let Some(_) = map.next_entry::<&str, ::serde_json::Value>()? {
        /* ignore */
    }
    Ok(())
}
