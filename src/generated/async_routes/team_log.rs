// DO NOT EDIT
// This file was @generated by Stone

#![allow(
    clippy::too_many_arguments,
    clippy::large_enum_variant,
    clippy::result_large_err,
    clippy::doc_markdown,
)]

#[allow(unused_imports)]
pub use crate::generated::types::team_log::*;

/// Retrieves team events. If the result's [`GetTeamEventsResult::has_more`](GetTeamEventsResult)
/// field is `true`, call [`get_events_continue()`](crate::team_log::get_events_continue) with the
/// returned cursor to retrieve more entries. If end_time is not specified in your request, you may
/// use the returned cursor to poll [`get_events_continue()`](crate::team_log::get_events_continue)
/// for new events. Many attributes note 'may be missing due to historical data gap'. Note that the
/// file_operations category and & analogous paper events are not available on all Dropbox Business
/// [plans](/business/plans-comparison). Use
/// [features/get_values](/developers/documentation/http/teams#team-features-get_values) to check
/// for this feature. Permission : Team Auditing.
pub fn get_events<'a>(
    client: &'a impl crate::async_client_trait::TeamAuthClient,
    arg: &'a GetTeamEventsArg,
) -> impl std::future::Future<Output=Result<GetTeamEventsResult, crate::Error<GetTeamEventsError>>> + Send + 'a {
    crate::client_helpers::request(
        client,
        crate::client_trait_common::Endpoint::Api,
        crate::client_trait_common::Style::Rpc,
        "team_log/get_events",
        arg,
        None)
}

/// Once a cursor has been retrieved from [`get_events()`](crate::team_log::get_events), use this to
/// paginate through all events. Permission : Team Auditing.
pub fn get_events_continue<'a>(
    client: &'a impl crate::async_client_trait::TeamAuthClient,
    arg: &'a GetTeamEventsContinueArg,
) -> impl std::future::Future<Output=Result<GetTeamEventsResult, crate::Error<GetTeamEventsContinueError>>> + Send + 'a {
    crate::client_helpers::request(
        client,
        crate::client_trait_common::Endpoint::Api,
        crate::client_trait_common::Style::Rpc,
        "team_log/get_events/continue",
        arg,
        None)
}

