// DO NOT EDIT
// This file was @generated by Stone

#![allow(
    clippy::too_many_arguments,
    clippy::large_enum_variant,
    clippy::result_large_err,
    clippy::doc_markdown,
)]

#[allow(unused_imports)]
pub use crate::generated::types::users::*;

/// Get a list of feature values that may be configured for the current account.
pub fn features_get_values(
    client: &impl crate::client_trait::UserAuthClient,
    arg: &UserFeaturesGetValuesBatchArg,
) -> Result<UserFeaturesGetValuesBatchResult, crate::Error<UserFeaturesGetValuesBatchError>> {
    crate::client_helpers::unwrap_async(
        crate::client_helpers::request(
            client,
            crate::client_trait_common::Endpoint::Api,
            crate::client_trait_common::Style::Rpc,
            "users/features/get_values",
            arg,
            None)
    )
}

/// Get information about a user's account.
pub fn get_account(
    client: &impl crate::client_trait::UserAuthClient,
    arg: &GetAccountArg,
) -> Result<BasicAccount, crate::Error<GetAccountError>> {
    crate::client_helpers::unwrap_async(
        crate::client_helpers::request(
            client,
            crate::client_trait_common::Endpoint::Api,
            crate::client_trait_common::Style::Rpc,
            "users/get_account",
            arg,
            None)
    )
}

/// Get information about multiple user accounts.  At most 300 accounts may be queried per request.
pub fn get_account_batch(
    client: &impl crate::client_trait::UserAuthClient,
    arg: &GetAccountBatchArg,
) -> Result<GetAccountBatchResult, crate::Error<GetAccountBatchError>> {
    crate::client_helpers::unwrap_async(
        crate::client_helpers::request(
            client,
            crate::client_trait_common::Endpoint::Api,
            crate::client_trait_common::Style::Rpc,
            "users/get_account_batch",
            arg,
            None)
    )
}

/// Get information about the current user's account.
pub fn get_current_account(
    client: &impl crate::client_trait::UserAuthClient,
) -> Result<FullAccount, crate::Error<crate::NoError>> {
    crate::client_helpers::unwrap_async(
        crate::client_helpers::request(
            client,
            crate::client_trait_common::Endpoint::Api,
            crate::client_trait_common::Style::Rpc,
            "users/get_current_account",
            &(),
            None)
    )
}

/// Get the space usage information for the current user's account.
pub fn get_space_usage(
    client: &impl crate::client_trait::UserAuthClient,
) -> Result<SpaceUsage, crate::Error<crate::NoError>> {
    crate::client_helpers::unwrap_async(
        crate::client_helpers::request(
            client,
            crate::client_trait_common::Endpoint::Api,
            crate::client_trait_common::Style::Rpc,
            "users/get_space_usage",
            &(),
            None)
    )
}

